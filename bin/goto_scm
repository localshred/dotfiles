#!/usr/bin/env bb

(ns goto_scm
  (:require
   [clojure.java.shell :as shell]
   [clojure.string :as string]
   [clojure.tools.cli :as cli]))

(defn tap [x] (println x) x)

(defn stderr
  [x]
  (binding [*out* *err*]
    (tap x)))

(defn safe-lower-case
  [s]
  (when (some? s)
    (string/lower-case s)))

(defn not-blank?
  [s]
  (not (string/blank? s)))

(def provider?
  #{:github})

(def cli-opts
  [["-u" "--user USER" "User or org to open"
    :parse-fn safe-lower-case]
   ["-r" "--repo REPO" "Repo to open"
    :parse-fn safe-lower-case]
   ["-i" "--issues" "Navigate to repo issues"]
   ["-p" "--pull-requests" "Navigate to repo pull requests"]
   ["-n" "--number N" "Issue or Pull Request number to open. Ignored unless paired with -p or -i."
    :parse-fn #(Integer/parseInt %1)]
   ["-s" "--scm" "SCM Provider. Currently supported providers: github"
    :parse-fn keyword
    :validate [provider? (format "Invalid SCM provider. Should be one of: %s"
                           (string/join ", " (map name provider?)))]]
   ["-d" "--debug" "Enable debug logging"]
   ["-h" "--help" "Print this help text"]])

(defmulti task (fn [{:keys [options errors]}]
                 (cond
                   (true? (:help options))         :help
                   (seq errors)                    :help
                   :else                           :goto-scm)))

(def aliased-users
  {"l" {:user "localshred" :scm :github}
   "c" {:user "crxdev" :scm :github}
   "s" {:user "spiff" :scm :github}})

(def github-base-url "https://github.com")

(defmulti build-url
  (fn [{:keys [scm user repo issues pull-requests number]
        :or   {scm :github}}]
    (cond
      (and issues number)        [scm :issue]
      (and pull-requests number) [scm :pull]
      issues                [scm :issues]
      pull-requests         [scm :pulls]
      repo                  [scm :repo]
      user                  [scm :user]
      :else                 :invalid-url)))

(defmethod build-url :invalid-url
  [options]
  (binding [*out* *err*]
    (println "Invalid options given:")
    (println options)))

(defmethod build-url [:github :user]
  [{:keys [user]}]
  (format "%s/%s" github-base-url user))

(defmethod build-url [:github :repo]
  [{:keys [user repo]}]
  (format "%s/%s/%s" github-base-url user repo))

(defmethod build-url [:github :issues]
  [{:keys [user repo]}]
  (format "%s/%s/%s/issues" github-base-url user repo))

(defmethod build-url [:github :issue]
  [{:keys [user repo number]}]
  (format "%s/%s/%s/issues/%d" github-base-url user repo number))

(defmethod build-url [:github :pulls]
  [{:keys [user repo]}]
  (format "%s/%s/%s/pulls" github-base-url user repo))

(defmethod build-url [:github :pull]
  [{:keys [user repo number]}]
  (format "%s/%s/%s/pull/%d" github-base-url user repo number))

(defn- update-user-from-alias
  "Fetches the aliased user (if present) and updates the :user and :scm keys.
  Will not overwrite the incoming :scm key if present."
  [options]
  (if-let [aliased-user (get aliased-users (:user options))]
    (cond-> options
      (:user aliased-user)   (assoc :user (:user aliased-user))
      (and
        (not (provider? (:scm options)))
        (:scm aliased-user)) (assoc :scm (:scm aliased-user)))
    options))

(defn- parse-from-args
  [options arguments]
  (let [[user repo number] (string/split (first arguments) #"[\/#]")]
    (cond-> options
      (some? user)     (assoc :user user)
      (some? repo)     (assoc :repo repo)
      (some? number)   (assoc :number (Integer/parseInt number) :issues true)
      (:debug options) (tap))))

(defmethod task :goto-scm
  [{:keys [arguments options] :as cli-parsed}]
  (when (:debug options)
    (stderr cli-parsed))
  (let [url (-> options
              (parse-from-args arguments)
              (update-user-from-alias)
              (build-url))]
    (when url
      (println (format "Opening %s" url))
      (let [{:keys [exit out err]} (shell/sh "open" url)]
        (when (not-blank? out) (println out))
        (when (not-blank? err) (stderr err))
        (System/exit exit)))))

(defmethod task :help
  [{:keys [errors summary]}]
  (println "goto_scm [OPTIONS]
  Navigate to SCM provider URLs for user, repo, issues, prs.

Usage:
  alfred_wf_scm -h
  alfred_wf_scm -u foo                    # navigate to https://github.com/foo
  alfred_wf_scm -u foo -s gitlab          # navigate to https://gitlab.com/foo
  alfred_wf_scm -u foo -r bar             # navigate to https://github.com/foo/bar
  alfred_wf_scm -u foo -r bar -i          # navigate to https://github.com/foo/bar/issues
  alfred_wf_scm -u foo -r bar -i -n 123   # navigate to https://github.com/foo/bar/issue/123
  alfred_wf_scm -u foo -r bar -p          # navigate to https://github.com/foo/bar/pulls
  alfred_wf_scm -u foo -r bar -p -n 456   # navigate to https://github.com/foo/bar/pull/456

Options:")
  (println summary)
  (when (seq errors)
    (println)
    (println "Errors:")
    (doseq [error errors]
      (println (str "  [!] " error)))
    (System/exit 1)))

(task (cli/parse-opts *command-line-args* cli-opts))
